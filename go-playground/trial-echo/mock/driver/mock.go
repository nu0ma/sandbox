// Code generated by MockGen. DO NOT EDIT.
// Source: driver/db_driver.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	driver "github.com/nu0ma/sandbox/go-playground/trial-echo/driver"
)

// MockIDBDriver is a mock of IDBDriver interface.
type MockIDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockIDBDriverMockRecorder
}

// MockIDBDriverMockRecorder is the mock recorder for MockIDBDriver.
type MockIDBDriverMockRecorder struct {
	mock *MockIDBDriver
}

// NewMockIDBDriver creates a new mock instance.
func NewMockIDBDriver(ctrl *gomock.Controller) *MockIDBDriver {
	mock := &MockIDBDriver{ctrl: ctrl}
	mock.recorder = &MockIDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBDriver) EXPECT() *MockIDBDriverMockRecorder {
	return m.recorder
}

// GetTodo mocks base method.
func (m *MockIDBDriver) GetTodo() (driver.TodoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo")
	ret0, _ := ret[0].(driver.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockIDBDriverMockRecorder) GetTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockIDBDriver)(nil).GetTodo))
}

// GetUsers mocks base method.
func (m *MockIDBDriver) GetUsers() (driver.UsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(driver.UsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIDBDriverMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIDBDriver)(nil).GetUsers))
}
