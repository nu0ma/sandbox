// Code generated by MockGen. DO NOT EDIT.
// Source: port/todo.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	domain "github.com/nu0ma/sandbox/go-playground/trial-echo/domain"
)

// MockTodoPort is a mock of TodoPort interface.
type MockTodoPort struct {
	ctrl     *gomock.Controller
	recorder *MockTodoPortMockRecorder
}

// MockTodoPortMockRecorder is the mock recorder for MockTodoPort.
type MockTodoPortMockRecorder struct {
	mock *MockTodoPort
}

// NewMockTodoPort creates a new mock instance.
func NewMockTodoPort(ctrl *gomock.Controller) *MockTodoPort {
	mock := &MockTodoPort{ctrl: ctrl}
	mock.recorder = &MockTodoPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoPort) EXPECT() *MockTodoPortMockRecorder {
	return m.recorder
}

// GetTodo mocks base method.
func (m *MockTodoPort) GetTodo(ctx echo.Context) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", ctx)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoPortMockRecorder) GetTodo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoPort)(nil).GetTodo), ctx)
}
